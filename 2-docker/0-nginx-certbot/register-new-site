#!/bin/bash
#
# Register a new site and request a new certificate

display_usage() { 
    echo "Register a new site and request a new certificate." 
    echo -e "\nUsage:\n$0 url domain\n"
    echo "  url          connection string for the site"
    echo "  domain       domain name for the site"
}

# check whether user had supplied -h or --help . If yes display usage
if [[ $1 == "--help" ||  $1 == "-h" ]]; then
    display_usage
    exit 0
fi

# if less than two arguments supplied, display usage
if [[  $# -ne 2 ]]; then
    echo -e "Expect 2 arguments, $# given\n"
    display_usage
    exit 1
fi

CONNECTION=$1
DOMAIN=$2

# ask for user's email address
EMAIL_ARG=''
read -p "Enter email for let's encrypt service: " USER_INPUT
if [[ -z "$USER_INPUT" ]]; then
    echo "Warning: unsafely register without email"
    EMAIL_ARG="--register-unsafely-without-email"
else
    EMAIL_ARG="--email $USER_INPUT"
fi

# request certificate
docker exec -ti certbot certbot certonly --webroot -w /var/www/certbot \
    $EMAIL_ARG \
    -d $DOMAIN \
    --rsa-key-size 4096 \
    --agree-tos

# write new site configuration
CONFDIR=`mktemp -d`
TMPFILE=`mktemp -p $CONFDIR -t XXXXXXXX.conf`
cat >$TMPFILE <<EOF
server {
    listen 443 ssl;
    server_name ${DOMAIN};
    
    location / {
        resolver 127.0.0.11;
        set \$target ${CONNECTION};
        proxy_pass \$target;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;

    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}
EOF
# use default editor for user to edit it
"${EDITOR:-${VISUAL:-vi}}" $TMPFILE

# check validity of the file
CHECK=$(docker run --rm -t -a stdout --name nginx-validator -v $CONFDIR:/etc/nginx/conf.d:ro -v certbot-conf:/etc/letsencrypt:ro nginx:latest nginx -t)

# look for the word successful and count the lines that have it
SUCCESS=$(echo $CHECK | grep successful | wc -l)

if [ $SUCCESS = 0 ]; then
    echo "FAILED"
    echo "$CHECK"
    exit 1
else
    echo SUCCESS
fi

# copy the final file into configuration volume
docker cp $TMPFILE nginx:/etc/nginx/conf.d/$DOMAIN.conf
# clean up
rm -rf $CONFDIR

# reload nginx
docker exec nginx nginx -s reload
